// <auto-generated />
using System;
using Framebook.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Framebook.Infra.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211110172938_AddStacksExperiencia")]
    partial class AddStacksExperiencia
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Framebook.Domain.Models.Professional", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.HasKey("ProfessionalId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Professional");
                });

            modelBuilder.Entity("Framebook.Domain.Models.RefreshToken", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReplaceByToken")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Framebook.Domain.Models.StackAprender", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int");

                    b.Property<int>("StackId")
                        .HasColumnType("int");

                    b.HasKey("ProfissionalId", "StackId");

                    b.ToTable("StackAprender");
                });

            modelBuilder.Entity("Framebook.Domain.Models.StackExperiencia", b =>
                {
                    b.Property<int>("ProfissionalId")
                        .HasColumnType("int");

                    b.Property<int>("StackId")
                        .HasColumnType("int");

                    b.HasKey("ProfissionalId", "StackId");

                    b.ToTable("StackExperiencia");
                });
#pragma warning restore 612, 618
        }
    }
}
